// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TN.HealthPortal.Data.EF;

#nullable disable

namespace TN.HealthPortal.Data.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FarmEntityVeterinarianEntity", b =>
                {
                    b.Property<string>("VeterinariansEmployeeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FarmsBlnNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FarmsPremiseID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VeterinariansEmployeeCode", "FarmsBlnNumber", "FarmsPremiseID");

                    b.HasIndex("FarmsBlnNumber", "FarmsPremiseID");

                    b.ToTable("FarmVeterinarians", (string)null);
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.DiseaseStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmEntityBlnNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FarmEntityPremiseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FarmEntityBlnNumber", "FarmEntityPremiseID");

                    b.ToTable("DiseaseStatuses");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.FarmEntity", b =>
                {
                    b.Property<string>("BlnNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PremiseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlnNumber", "PremiseID");

                    b.HasIndex("SourceId");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.ManufacturerEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.PathogenEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Pathogens");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerName");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.SchemeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PigCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductionPhase")
                        .HasColumnType("int");

                    b.Property<string>("Timing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Schemes");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.SourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Boar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gilt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Semen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.VeterinarianEntity", b =>
                {
                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeCode");

                    b.ToTable("Veterinarians");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.DewormingSchemeEntity", b =>
                {
                    b.HasBaseType("TN.HealthPortal.Data.EF.Entities.SchemeEntity");

                    b.Property<string>("FarmEntityBlnNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FarmEntityPremiseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RouteOfAdministration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FarmEntityBlnNumber", "FarmEntityPremiseID");

                    b.ToTable("DewormingSchemes");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.VaccinationSchemeEntity", b =>
                {
                    b.HasBaseType("TN.HealthPortal.Data.EF.Entities.SchemeEntity");

                    b.Property<string>("FarmEntityBlnNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FarmEntityPremiseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PathogenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PathogenName");

                    b.HasIndex("FarmEntityBlnNumber", "FarmEntityPremiseID");

                    b.ToTable("VaccinationSchemes");
                });

            modelBuilder.Entity("FarmEntityVeterinarianEntity", b =>
                {
                    b.HasOne("TN.HealthPortal.Data.EF.Entities.VeterinarianEntity", null)
                        .WithMany()
                        .HasForeignKey("VeterinariansEmployeeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TN.HealthPortal.Data.EF.Entities.FarmEntity", null)
                        .WithMany()
                        .HasForeignKey("FarmsBlnNumber", "FarmsPremiseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.DiseaseStatusEntity", b =>
                {
                    b.HasOne("TN.HealthPortal.Data.EF.Entities.FarmEntity", null)
                        .WithMany("DiseaseStatuses")
                        .HasForeignKey("FarmEntityBlnNumber", "FarmEntityPremiseID");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.FarmEntity", b =>
                {
                    b.HasOne("TN.HealthPortal.Data.EF.Entities.SourceEntity", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.ProductEntity", b =>
                {
                    b.HasOne("TN.HealthPortal.Data.EF.Entities.ManufacturerEntity", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.SchemeEntity", b =>
                {
                    b.HasOne("TN.HealthPortal.Data.EF.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.DewormingSchemeEntity", b =>
                {
                    b.HasOne("TN.HealthPortal.Data.EF.Entities.SchemeEntity", null)
                        .WithOne()
                        .HasForeignKey("TN.HealthPortal.Data.EF.Entities.DewormingSchemeEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TN.HealthPortal.Data.EF.Entities.FarmEntity", null)
                        .WithMany("DewormingSchemes")
                        .HasForeignKey("FarmEntityBlnNumber", "FarmEntityPremiseID");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.VaccinationSchemeEntity", b =>
                {
                    b.HasOne("TN.HealthPortal.Data.EF.Entities.SchemeEntity", null)
                        .WithOne()
                        .HasForeignKey("TN.HealthPortal.Data.EF.Entities.VaccinationSchemeEntity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TN.HealthPortal.Data.EF.Entities.PathogenEntity", "Pathogen")
                        .WithMany()
                        .HasForeignKey("PathogenName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TN.HealthPortal.Data.EF.Entities.FarmEntity", null)
                        .WithMany("VaccinationSchemes")
                        .HasForeignKey("FarmEntityBlnNumber", "FarmEntityPremiseID");

                    b.Navigation("Pathogen");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.FarmEntity", b =>
                {
                    b.Navigation("DewormingSchemes");

                    b.Navigation("DiseaseStatuses");

                    b.Navigation("VaccinationSchemes");
                });

            modelBuilder.Entity("TN.HealthPortal.Data.EF.Entities.ManufacturerEntity", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
