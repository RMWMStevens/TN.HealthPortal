// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TN.HealthPortal.Data.EF;

#nullable disable

namespace TN.HealthPortal.Data.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221107211230_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FarmVeterinarian", b =>
                {
                    b.Property<Guid>("FarmsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VeterinariansId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FarmsId", "VeterinariansId");

                    b.HasIndex("VeterinariansId");

                    b.ToTable("FarmVeterinarians", (string)null);
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.DiseaseStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("DiseaseStatuses", (string)null);
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Farm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlnNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PremiseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Farms", (string)null);
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Manufacturer", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Manufacturers", (string)null);
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Pathogen", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Pathogens", (string)null);
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerName");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Scheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PigCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductionPhase")
                        .HasColumnType("int");

                    b.Property<string>("Timing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Schemes", (string)null);
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Source", b =>
                {
                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Boar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gilt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Semen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FarmId");

                    b.ToTable("Sources", (string)null);
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Veterinarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Veterinarians", (string)null);
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.DewormingScheme", b =>
                {
                    b.HasBaseType("TN.HealthPortal.Lib.Entities.Scheme");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RouteOfAdministration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FarmId");

                    b.ToTable("DewormingSchemes", (string)null);
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.VaccinationScheme", b =>
                {
                    b.HasBaseType("TN.HealthPortal.Lib.Entities.Scheme");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PathogenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("FarmId");

                    b.HasIndex("PathogenName");

                    b.ToTable("VaccinationSchemes", (string)null);
                });

            modelBuilder.Entity("FarmVeterinarian", b =>
                {
                    b.HasOne("TN.HealthPortal.Lib.Entities.Farm", null)
                        .WithMany()
                        .HasForeignKey("FarmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TN.HealthPortal.Lib.Entities.Veterinarian", null)
                        .WithMany()
                        .HasForeignKey("VeterinariansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.DiseaseStatus", b =>
                {
                    b.HasOne("TN.HealthPortal.Lib.Entities.Farm", null)
                        .WithMany("DiseaseStatuses")
                        .HasForeignKey("FarmId");
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Product", b =>
                {
                    b.HasOne("TN.HealthPortal.Lib.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Scheme", b =>
                {
                    b.HasOne("TN.HealthPortal.Lib.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Source", b =>
                {
                    b.HasOne("TN.HealthPortal.Lib.Entities.Farm", null)
                        .WithOne("Source")
                        .HasForeignKey("TN.HealthPortal.Lib.Entities.Source", "FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.DewormingScheme", b =>
                {
                    b.HasOne("TN.HealthPortal.Lib.Entities.Farm", null)
                        .WithMany("DewormingSchemes")
                        .HasForeignKey("FarmId");

                    b.HasOne("TN.HealthPortal.Lib.Entities.Scheme", null)
                        .WithOne()
                        .HasForeignKey("TN.HealthPortal.Lib.Entities.DewormingScheme", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.VaccinationScheme", b =>
                {
                    b.HasOne("TN.HealthPortal.Lib.Entities.Farm", null)
                        .WithMany("VaccinationSchemes")
                        .HasForeignKey("FarmId");

                    b.HasOne("TN.HealthPortal.Lib.Entities.Scheme", null)
                        .WithOne()
                        .HasForeignKey("TN.HealthPortal.Lib.Entities.VaccinationScheme", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TN.HealthPortal.Lib.Entities.Pathogen", "Pathogen")
                        .WithMany()
                        .HasForeignKey("PathogenName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pathogen");
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Farm", b =>
                {
                    b.Navigation("DewormingSchemes");

                    b.Navigation("DiseaseStatuses");

                    b.Navigation("Source")
                        .IsRequired();

                    b.Navigation("VaccinationSchemes");
                });

            modelBuilder.Entity("TN.HealthPortal.Lib.Entities.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
