@page "/login"
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorageService
@inject AuthenticationStateProvider authenticationStateProvider
@inject IHttpClientFactory httpClientFactory
@inject IConfiguration configuration;

<div class="min-vh-100 d-flex align-items-center justify-content-center">
    <div>
        <EditForm Model="@veterinarian" OnValidSubmit="SubmitAsync">
            <div class="form-outline mb-4">
                <label class="form-label" for="employee-code">Employee code</label>
                <input type="text" id="employee-code" class="form-control" @bind-value="veterinarian.EmployeeCode"/>
                <input type="submit" class="btn btn-primary btn-block mt-4" value="Log in"/>
            </div>
        </EditForm>
        <span class="text-danger">@errorMessage</span>
    </div>
</div>

@code {
    private VeterinarianDto veterinarian = new();
    private string errorMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await LogoutAsync();
        await base.OnParametersSetAsync();
    }

    private async Task SubmitAsync()
    {
        try
        {
            errorMessage = string.Empty;
            // Required because otherwise the AuthorizationDelegatingHandler won't be able to retrieve the EmployeeCode
            await localStorageService.SetItemAsStringAsync("employeeCode", veterinarian.EmployeeCode); 

            var httpClient = httpClientFactory.CreateClient("Api");
            var response = await httpClient.GetAsync(
                $"{configuration["Api:BaseUrl"]}/Veterinarians/{veterinarian.EmployeeCode}");
            response.EnsureSuccessStatusCode();
            var result = JsonExtensions.FromJson<VeterinarianDto>(await response.Content.ReadAsStringAsync());

            await localStorageService.SetItemAsStringAsync("name", result.Name);
            await localStorageService.SetItemAsync<bool>("isAdmin", result.IsAdmin);
            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
        catch
        {
            errorMessage = "Login failed, please try again.";
            await LogoutAsync();
        }
    }

    private async Task LogoutAsync()
    {
        await localStorageService.ClearAsync();
        await authenticationStateProvider.GetAuthenticationStateAsync();
    }
}