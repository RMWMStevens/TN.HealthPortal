@page "/farms"
@using System.Text.Json;
@attribute [Authorize]
@inject IHttpClientFactory httpClientFactory
@inject IConfiguration configuration;

<style>
    td, th, h3 {
        padding: 10px;
    }

    .myStyle {
        border: 2px solid black;
        margin: 2px;
    }

    table {
        width: 100%;
    }

    td {
        text-align: left;
        vertical-align: top;
        max-width: 250px;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    .magentaBold {
        text-decoration: none;
        font-weight: bolder;
        color: darkmagenta;
    }
 </style>

<div class="myStyle">
    <h3>@(!viewOutdated ? "Farms" : "Farms with outdated protocols")</h3>
    <button class="btn btn-primary mb-1 mx-1" @onclick="ToggleViewOutdatedAsync">
            @(viewOutdated ? "View all farms" : "View farms with outdated protocols")
    </button>
    <table>
        <tr>
            <th>BlnNumber</th>
            <th>Name</th>
            <th>PremiseId</th>
            <th>CountryName</th>
            <th>Capacity</th>
            <th>Description</th>
            <th>History</th>
            <th>Last Updated</th>
        </tr>
        @foreach(var farm in farms)
        {
            <tr>
                <td><a href="/farm/@farm.BlnNumber" class="magentaBold">@farm.BlnNumber</a></td>
                <td>@farm.Name</td>
                <td>@farm.PremiseID</td>
                <td>@farm.Country.Name</td>
                <td>@farm.Capacity</td>
                <td>@farm.Description</td>
                <td>@farm.History</td>
                <td>@CalculateDaysSinceLastUpdate(farm.ManuallyUpdatedAt)</td>
            </tr>
        }
    </table>
</div>

@code {
    private IEnumerable<FarmDto> farms = new List<FarmDto>();
    private bool viewOutdated = false;

    protected override async Task OnInitializedAsync()
    {
        await GetFarmsAsync();
        await base.OnInitializedAsync();
    }

    private async Task GetFarmsAsync()
    {
        var httpClient = httpClientFactory.CreateClient("Api");
        var requestUrl = $"{configuration["Api:BaseUrl"]}/Farms";
        if (viewOutdated)
        {
            requestUrl += "/outdated";
        }
        farms = await httpClient.GetFromJsonAsync<IEnumerable<FarmDto>>(requestUrl);
    }

    private async Task ToggleViewOutdatedAsync()
    {
        viewOutdated = !viewOutdated;
        await GetFarmsAsync();
    }

    private string CalculateDaysSinceLastUpdate(DateTime? updatedAt)
    {
        if (!updatedAt.HasValue)
            return "";
        return $"{(DateTime.UtcNow - updatedAt.Value.Date).Days} days";
    }
}