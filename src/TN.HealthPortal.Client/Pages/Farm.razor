@page "/farm/{blnNumber}"
@using System.Text.Json;
@attribute [Authorize]
@inject IHttpClientFactory httpClientFactory
@inject IConfiguration configuration
@inject IJSRuntime JSRuntime

<style>
    td, th {
        padding: 10px;
    }

    h3 {
        padding: 10px;
        text-decoration: none;
        font-weight: bolder;
        color: darkmagenta;
    }

    a {
        text-decoration: none;
    }

    .flex-container {
        display: flex;
        height: 100%;
        padding: 10px;
        gap: 10px;
    }

    .flex-container > div {
        border: 4px solid black;
        border-radius: 10px;
        padding: 10px;
    }

    .item1 {
        flex-grow: 1;
        flex-basis: 80%;
    }

    .item2 {
        flex-basis: 20%;
    }

    .item3 {
        flex-basis: 33%;
    }

    .item4 {
        flex-basis: 66%;
    }

    .item5 {
        flex-grow: 1;
        flex-basis: 100%;
    }
</style>

<body>
    <div class="flex-container">
        <div class="item1">
            <h3>@farm.BlnNumber @farm.Name</h3>
        </div>
        <div class="item2">
            <table>
                <tr>
                    <th>PremiseId</th>
                    <td>@farm.PremiseID</td>
                </tr>
                <tr>
                    <th>Capacity</th>
                    <td>@farm.Capacity</td>
                </tr>
            </table>
        </div>
    </div>
    <div class="flex-container">
        <div class="item3">
            <h3>Address</h3>
            <table>
                <tr>
                    <th>Street</th>
                    <td>@farm.Address.Street</td>
                </tr>
                <tr>
                    <th>StreetNumber</th>
                    <td>@farm.Address.StreetNumber</td>
                </tr>
                <tr>
                    <th>City</th>
                    <td>@farm.Address.City</td>
                </tr>
                <tr>
                    <th>PostalCode</th>
                    <td>@farm.Address.PostalCode</td>
                </tr>
                <tr>
                    <th>State</th>
                    <td>@farm.Address.State</td>
                </tr>
                <tr>
                    <th>CountryName</th>
                    <td>@farm.Country.Name</td>
                </tr>
            </table>
        </div>
        <div class="item3">
            <h3>Production type</h3>
            <table>
                @foreach (var productionType in farm.ProductionTypes)
                {
                    <tr>
                        <td>@productionType.Name</td>
                    </tr>
                }
            </table>
        </div>
        <div class="item3">
            <h3>Disease Status</h3>
            <table>
                @foreach (var diseaseStatuse in farm.DiseaseStatuses)
                {
                    <tr>
                        <td>@diseaseStatuse.Disease</td>
                        <td>@diseaseStatuse.Status</td>
                    </tr>
                }
            </table>
        </div>
    </div>
    <div class="flex-container">
        <div class="item5">
            <h3>Sources</h3>
            <table>
                @foreach (var source in farm.Sources)
                {
                    <tr>
                        <td><b>@source.Category</b></td>
                        <td>@source.Description</td>
                    </tr>
                }
            </table>
        </div>
    </div>
    <div class="flex-container">
        <div class="item3">
            <h3>View <a href="/farm/@farm.BlnNumber/protocol/deworming" class="magentaBold">Deworming Protocol</a></h3>
            <h3>View <a href="/farm/@farm.BlnNumber/protocol/vaccination" class="magentaBold">Vaccination Protocol</a></h3>
            <h3><strong><a class="btn btn-primary" @onclick:preventDefault @onclick="DownloadPdfHealthReportAsync">Download PDF Health Report</a></strong></h3>
        </div>
        <div class="item4">
            <h3>Background information</h3>
            <table>
                <tr>
                    <th>Description</th>
                    <td>@farm.Description</td>
                </tr>
                <tr>
                    <th>History</th>
                    <td>@farm.History</td>
                </tr>
            </table>
        </div>
    </div>

    @*Based on https://www.meziantou.net/generating-and-downloading-a-file-in-a-blazor-webassembly-application.htm*@
    <script suppress-error="BL9992">
        function BlazorDownloadFile(filename, contentType, content) {
            const file = new File([content], filename, { type: contentType });
            const exportUrl = URL.createObjectURL(file);
            const a = document.createElement("a");

            document.body.appendChild(a);
            a.href = exportUrl;
            a.download = filename;
            a.target = "_self";
            a.click();

            URL.revokeObjectURL(exportUrl);
        }
    </script>
</body>

@code {
    [Parameter]
    public string BlnNumber { get; set; }
    private FarmDto farm = new FarmDto();

    protected override async Task OnInitializedAsync()
    {
        var httpClient = httpClientFactory.CreateClient("Api");
        farm = await httpClient.GetFromJsonAsync<FarmDto>(
            $"{configuration["Api:BaseUrl"]}/Farms/{BlnNumber}");
        await base.OnInitializedAsync();
    }

    private async Task DownloadPdfHealthReportAsync()
    {
        var httpClient = httpClientFactory.CreateClient("Api");
        var fileDownloadDto = await httpClient.GetFromJsonAsync<FileDownloadDto>(
            $"{configuration["Api:BaseUrl"]}/Farms/{BlnNumber}/DownloadPdfHealthReport");
        await JSRuntime.InvokeVoidAsync(
            "BlazorDownloadFile",
            fileDownloadDto.FileName,
            fileDownloadDto.ContentType,
            fileDownloadDto.Content);
    }
}
